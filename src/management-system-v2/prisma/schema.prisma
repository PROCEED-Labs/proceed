// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  firstName        String?
  lastName         String?
  username         String?      @unique
  email            String?      @unique
  isGuest          Boolean
  emailVerifiedOn  String?
  image            String?
  favourites       String[]
  processes        Process[]   
  ownedWorkspaces  Workspace[] @relation("workspaceOwner")
  memberIn         Membership[]
  folders          Folder[]
  oauthAccounts    OauthAccount[]
  roleMembers      RoleMember[]
}

model OauthAccount {
  id                String @id @default(uuid())
  userId            String
  provider          String
  type              String
  providerAccountId String

  user User? @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId_unique")
}



model Process {
  id                   String       @id @default(uuid())
  originalId           String
  name                 String
  description          String
  createdOn            String
  lastEditedOn           String
  inEditingBy          Json?
  processIds           String[]
  type                 String
  folder               Folder      @relation(fields: [folderId], references: [id],onDelete: Cascade)
  folderId             String
  sharedAs             String
  shareTimestamp       Int
  allowIframeTimestamp Int
  workspace            Workspace    @relation(fields: [environmentId], references: [id],onDelete: Cascade)
  environmentId        String
  versions             Version[]
  bpmn                 String       @db.Xml
  //imagePath               String
  owner                User?        @relation(fields: [ownerId], references: [id],onDelete: Cascade)
  ownerId              String
  departments          String[]    @default([])
  variables            Json[]      @default([])
}

model Workspace {
  id                 String      @id @default(uuid())
  name               String?
  organization       Boolean
  isActive           Boolean?
  description        String?
  contactPhoneNumber String?
  logo               String?
  owner              User?       @relation("workspaceOwner", fields: [ownerId], references: [id],onDelete: Cascade)
  ownerId            String
  members            Membership[]
  folders            Folder[]  
  processes          Process[]
  roles              Role[]
}

model Membership {
  id          String    @id @default(uuid())
  userId      String
  environmentId String
  createdOn   String  

  user        User      @relation(fields: [userId], references: [id],onDelete: Cascade)
  workspace   Workspace @relation(fields: [environmentId], references: [id])

  @@unique([userId, environmentId], name: "unique_user_workspace_membership")
}

model Folder {
  id             String    @id @default(uuid())
  name           String
  parentFolder   Folder?   @relation("folderChildren", fields: [parentId], references: [id],onDelete: Cascade)
  parentId       String?
  type           String    @default("folder")
  user           User?     @relation(fields: [createdBy], references: [id])
  createdBy      String?
  workspace      Workspace @relation(fields: [environmentId], references: [id])
  environmentId  String
  processes      Process[] 
  childrenFolder Folder[]  @relation("folderChildren")
  lastEditedOn     String
  createdOn      String 
}

model Version {
  id            String     @id @default(uuid())
  name          String
  version       Int  
  description   String
  process       Process    @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId     String
  versionBasedOn Int?
  createdOn      String
  lastEditedOn   String
  bpmn          VersionBPMN?
}

model VersionBPMN {
  id        String   @id @default(uuid())
  xml       String   @db.Xml
  version   Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
  versionId String   @unique
}


// model ProcessImage {
//   id          String   @id @default(uuid())
//   process     Process  @relation(fields: [processId], references: [id],onDelete: Cascade)
//   processId   String
//   imagePath   String
// }

// model ProcessBPMN {
//   id        String  @id @default(uuid())
//   xml       String  @db.Xml
//   process   Process @relation(fields: [processId], references: [id],onDelete: Cascade)
//   processId String  @unique
  
// }

model Role {
  id           String      @id @default(uuid())
  workspace    Workspace   @relation(fields: [environmentId], references: [id])
  environmentId  String
  name         String
  description  String?
  note         String?
  permissions  Json
  expiration   String?
  default      Boolean?
  createdOn    String    
  lastEdited   String    

  members      RoleMember[]
}

model RoleMember {
  id        String @id @default(uuid())
  role      Role   @relation(fields: [roleId], references: [id])
  roleId    String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  createdOn String
}
