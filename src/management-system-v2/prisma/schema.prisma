// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemAdmin  {
  id            String @id @default(uuid())
  role          String @default("admin")
  user          User @relation(name: "systemAdmin",fields: [userId],references: [id])
  userId        String @unique
  createdOn     DateTime @default(now())
  lastEditedOn  DateTime @updatedAt
}

model User {
  id              String        @id @default(uuid())
  firstName       String?
  lastName        String?
  username        String?       @unique
  email           String?       @unique
  isGuest         Boolean
  emailVerifiedOn DateTime?
  image           String?
  favourites      String[]
  processes       Process[]
  ownedSpaces     Space[]       @relation("spaceOwner")
  memberIn        Membership[]
  folders         Folder[]
  oauthAccounts   OauthAccount[]
  roleMembers     RoleMember[]
  systemAdmin     SystemAdmin?   @relation("systemAdmin")
}

model OauthAccount {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  type              String
  providerAccountId String  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Process {
  id                   String   @id @default(uuid())
  originalId           String
  name                 String
  description          String
  createdOn            DateTime
  lastEditedOn         DateTime @updatedAt
  inEditingBy          Json?
  processIds           String[]
  type                 String
  folder               Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId             String
  sharedAs             String
  shareTimestamp       BigInt
  allowIframeTimestamp BigInt
  space                Space    @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId        String
  versions             Version[]
  bpmn                 String   @db.Xml
  creator              User?    @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId            String
  //TODO: Departments and Variables add here if needed in future
  processArtifacts     ProcessArtifacts[]
}

model ProcessArtifacts {
  id            String  @id @default(uuid())
  filePath      String  @unique
  fileName      String  @unique
  process       Process @relation(fields: [processId], references: [id])
  processId     String
  deletable     Boolean? @default(false)
  deletedOn     DateTime @default(now())
  refCounter    Int      @default(0)
}

model Space {
  id                 String        @id @default(uuid())
  name               String?
  isOrganization     Boolean
  isActive           Boolean?
  description        String?
  contactPhoneNumber String?
  logo               String?
  owner              User?         @relation("spaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId            String
  members            Membership[]
  folders            Folder[]
  processes          Process[]
  roles              Role[]
}

model Membership {
  id            String    @id @default(uuid())
  userId        String
  environmentId String
  createdOn     DateTime  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  space         Space     @relation(fields: [environmentId], references: [id], onDelete: Cascade)
}


model Folder {
  id             String    @id @default(uuid())
  name           String
  description    String
  parentFolder   Folder?   @relation("folderChildren", fields: [parentId], references: [id],onDelete: Cascade)
  parentId       String?
  owner           User?    @relation(fields: [createdBy], references: [id])
  createdBy      String?
  space          Space     @relation(fields: [environmentId], references: [id], onDelete:Cascade)
  environmentId  String
  processes      Process[] 
  childrenFolder Folder[]  @relation("folderChildren")
  lastEditedOn   DateTime  @updatedAt
  createdOn      DateTime 
}

model Version {
  id            String     @id @default(uuid())
  name          String
  version       BigInt     @unique
  description   String
  process       Process    @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId     String
  versionBasedOn BigInt?
  createdOn     DateTime
  lastEditedOn  DateTime   @updatedAt
  bpmn          String     @db.Xml
}

model Role {
  id           String      @id @default(uuid())
  space        Space       @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  name         String
  description  String?
  note         String?
  permissions  Json
  expiration   DateTime?
  default      Boolean?
  createdOn    DateTime
  lastEditedOn DateTime   @updatedAt

  members      RoleMember[]
}

model RoleMember {
  id        String  @id @default(uuid())
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdOn DateTime
}

